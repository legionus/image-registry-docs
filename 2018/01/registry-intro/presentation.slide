Openshift registry
code walkthrough
15:30 19 Jan 2018
Tags: registry, sourcecode, overview

Alexey Gladkov

https://github.com/openshift/image-registry

: To start our conversation about the openshift registry implementation, we need to talk about the background of this.
: And the first question is:

* What is an Image?

An image is the template for a container.

- *layer*: a tar archive bundling partial content from a filesystem
- *manifest*: the JSON representation of an image

* Manifest example

.code snippets/schema-v2.json

: This is what the manifest V2 looks like.

* Docker distribution overview

Rule: A blob is any kind of content that is stored by a registry under a content-addressable identifier (a "digest").

- as simple as possible
- stateless
- highly scalable

: No database (almost)
: No deletion of blobs (almost)

* Openshift registry features

- metadata is stored in the database (openshift master API).
- user accounts and credentials come from the openshift cluster.
- pullthrough
- mirroring
- audit logs
- prometheus metrics

: In the server terminology, there is a repository and tags in it.
: In our implementation, there is a namespace and the images in it.

: But on the other hand, our features also bring problems:

* Features disclaimer

- metadata is stored in the database ⟶ limits horizontal scalability
- user accounts and credentials ⟶ impossible to login in the registry with user/pass
- pullthrough ⟶ the possible performance and security issues
- mirroring ⟶ the possible exhaustion of the storage

* We know better how to design

.image images/complex-system.jpg _ 700

* How to change the behavior of the docker/distribution

: The docker/distribution uses middlewares to inject custom logic in the server's allowed locations.

- Auth controller ‒ wraps every request
- Registry middleware ‒ wraps reqistry interface in general
- Repository middleware ‒ wraps the repository-related requests
- Storage middleware ‒ wraps storage driver
- BlobDescriptorService ‒ implements the verification of access rights to blobs

This is all the places where we can influence behavior.

Not too much ?

: Each of them individually extends only a small part, but all together they provide many opportunities.

* How docker/distribution works

.image images/step1-docker-distribution.png

: This is how the hierarchy of objects looks in general.
: Everything starts with the creation of the docker application.
: The application creates the handlers for client requests, auth controller, cache, registry itself and storage driver.
: Each handler creates a new repository instance for each request.

* The docker/distribution middlewares

.image images/step2-docker-distribution-middleware.png _ 900

: Here are the places where we can integrate into the logic of the server.

* Supermiddleware

: Earlier, we registered a lot of middlewaries that could not communicate with each other.
: To simplify the implementation, we decided to gather them all.

- register as all the middlewares
- connects middleware layers together
- controls the middleware configuration

* Supermiddleware with docker/distribution

.image images/step3-registry-middleware.png _ 900

: Blue color shows one object - supermiddleware
: One middleware to bring them all and in the darkness bind them.

* How we search for a blob (blobDescriptorService)

- Search among the local links in the repository
- Search globally among all blobs and try to find the blob in the database
- Search on remote servers if allowed

: The first case is the usual behavior of the upstream. The server creates special links in the repository, which means that the blob belongs to the repository.
: The second case is the case where the image was not created by the registry server.
: The last case is possible only when the pullthrough is enabled. We will focus on this later.

* BlobDescriptorService implementation

.code snippets/blobDescriptorService-Stat.go

: Basically, this small fragment is the whole logic of the blobDescriptorService.

* BlobDescriptorService.Stat call

.html snippets/blobDescriptorService-Stat.html

: This is a list of calls from the blobDescriptorService to the storage driver.

* Push Image

- *GET* `/v2/`
- *GET* `/openshift/token`
- *HEAD* `/v2/<REPO>/blobs/<DIGEST>`
- *POST* `/v2/<REPO>/blobs/uploads/`
- *PATCH* `/v2/<REPO>/blobs/uploads/<UUID>`
- *PUT* `/v2/<REPO>/blobs/uploads/<UUID>`
- *PUT* `/v2/<REPO>/manifests/<TAG>`

: [1] API version check. This is used to determine if the server supports the v2 API. Now every registry implementation should support this API.
: [2] Second endpoint is used to get a session token.
: [3] Check if there is a blob.
: [4] Start uploading a new blob.
: [5] Chunked Upload. Formally, there can be many such requests, but because of the features of some storage drivers (such as S3), this is practically impossible.
: [6] Completion of the download of the blob.
: [7] Once all of the layers for an image are uploaded, the client can upload the image manifest.
: All requests are independent and the server mostly does not understand the relationship between them.

* Pull Image

- *GET* `/v2/`
- *GET* `/openshift/token`
- *GET* `/v2/<REPO>/manifests/<TAG>`
- *GET* `/v2/<REPO>/blobs/<DIGEST>`

: Let's talk about a slightly simpler query: getting an image.
: [1] API Version Check.
: [2] Get session token.
: [3] Get image manifest (this will include the list of blobs that need to be retrieved).
: [4] Get required blob (repeated for each layer in the manifest).

* ManifestService

.code snippets/manifestservice.go

: We try to follow the principle, when one feature = one middleware (wrapper).

* How the request for a manifest goes through the code

.html snippets/getmanifest.html

: Here is an incomplete stack of function calls to get the manifest.
: Some developers find it difficult to understand the code since the entry point is in a completely different place.
: Processing begins in the docker/distribution code and only sometimes processing is passed to our code.

: At position 16, you can see the call to the blobDescriptorService. I do not show his list of calls because we discussed them earlier.

* Pullthrough & mirroring

- Transparent proxy requests to third-party registry servers
- Cache external blobs locally

: This mechanism starts if the blob is not found locally.

* BlobStore

.code snippets/blobstore.go

* Pullthrough: Stat

.code snippets/pullthroughBlobStore-Stat.go

* Pullthrough: ServeBlob

.code snippets/pullthroughBlobStore-ServeBlob.go

* Get blob

.html snippets/getblob.html

* Tag service

: We do not store tags on the filesystem, so all requests are converted to queries to the database.

.code snippets/tagService-Get.go

: Here is an example of how we get a tag.

* Source code structure

The division into modules is not complete yet, but here is what it is now:

.html snippets/sourcecode.html

: [1] Implementation-specific definitions
: [2] Package audit log the beginning and end of each API request
: [3] Provides functions for token authentication specification
: [4] Provides facilities to speed up access to the storage backend. Unfortunately this is not enough to cache everything because some parts of the docker/distribution are not using our code.
: [5] Provides functions to make requests to openshift master API.
: [6] Module for processing an implementation-specific configuration
: [7] Provides functions for limiting incoming requests
: [8] Provides functions to collect runtime statistics
: [9] Provides functions for hard pruning
: [10] Yes, this is the supermiddleware
: [11] Middleware generator
: [12] Unsplit modules: auth, manifestService, tagService, pullthrough-related code, blobDescriptorService

